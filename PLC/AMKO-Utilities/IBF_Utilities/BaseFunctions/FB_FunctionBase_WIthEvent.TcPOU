<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="FB_FunctionBase_WIthEvent" Id="{0140c1b6-1d19-4ea0-a668-c0411892cb34}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'reflection'}
FUNCTION_BLOCK PUBLIC ABSTRACT FB_FunctionBase_WIthEvent EXTENDS FB_Base_WithEvent
VAR_INPUT
	bSafetyOk	: BOOL 		:= TRUE 				; // Module can operate safely [default true]
END_VAR
VAR_OUTPUT
	sActiveState	: STRING 		:= 'Idle'	; // active state of device 
	bManual			: BOOL 			:= FALSE 	; // device is in manual mode
	bIsSafe			: BOOL 			:= FALSE	; // Device is locked and safe
	bHeld			: BOOL 			:= FALSE 	; // Function is held
	bBlockedCommand	: BOOL 			:= FALSE 	; // a device command is blocked because of collision detect 
END_VAR
VAR
	bCmdManual 		: BOOL			:= FALSE	; // manual commands enabled control functions (thus disable automatic)
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[SUPER^();

// Communicate active state
IF NOT bSafetyOk THEN 
	sActiveState := 'Safety not ok';
ELSIF bErrorActive THEN 
	sActiveState := 'Error is active';
ELSIF NOT bInitOk THEN 
	sActiveState := 'Not initialized';
ELSIF bManual THEN 
	sActiveState := 'Operational';
END_IF 

// check for manual command mode
bManual := bCmdManual ;

// Execute device functions
IF bInitOk THEN  
	ExecMachineSafety();
	ExecDevFunctions();
END_IF

// Set fault if commands are blocked
IF bBlockedCommand THEN 
	fbEvent.CmdAddEvent( Event := TC_EVENTS.StateMessages.FunctionsIsBlocked);
END_IF	

]]></ST>
    </Implementation>
    <Method Name="CmdHold" Id="{6f5da2de-a0c9-45a9-97e4-4c7c0bf3aed8}">
      <Declaration><![CDATA[METHOD PUBLIC CmdHold : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bHeld 	:= TRUE ;
CmdHold := bHeld ;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CmdManual" Id="{db0662d6-d805-4046-ab9d-4a7e60512933}">
      <Declaration><![CDATA[METHOD PUBLIC CmdManual : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bCmdManual := true ;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CmdSafeStop" Id="{b6bb3a29-0ede-44ee-b37b-c4108cb4759e}">
      <Declaration><![CDATA[METHOD PUBLIC CmdSafeStop : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// check if device is safe
bIsSafe 	:= NOT bEnable ;
CmdSafeStop := bIsSafe ;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecDevFunctions" Id="{7fc95b8e-87fc-4948-aad6-2622ac8b1ac8}">
      <Declaration><![CDATA[METHOD PROTECTED ExecDevFunctions : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecMachineSafety" Id="{b5f44ac6-135f-4436-8d72-9ac63890bc3c}">
      <Declaration><![CDATA[METHOD PROTECTED ExecMachineSafety : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>
<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.5">
  <POU Name="FB_PositionTrigger" Id="{29a82a2d-884a-4e36-899d-c4cbd8f9a218}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PUBLIC FB_PositionTrigger // trigger function, sets trigger Q signal high when trigger position is between previous cycle's and current axis position.
VAR_INPUT
	fAxisPos			: LREAL	; // Axis position on which the to trigger
	nAxisModuloRev		: DINT 	:= 0	; // axis modulo revolutions 
	fAxisVelocity		: LREAL := 0 	; 	// velocity of axis 
	bDirPositive		: BOOL 	:= TRUE ; // Axis direction is forward 
	fEncoderTurnover	: LREAL	:= 360 	; // Encoder turnover value (standard 360 deg)
	bEnablenNegative 	: BOOL 	:= FALSE; // Enables negative input values
END_VAR
VAR_OUTPUT
	Q					: BOOL 	; // trigger signal
	bInternalTrigger	: BOOL 	; // Internal trigger signal 
	bTriggerArmed 		: BOOL 	; // Trigger is armed 
	bEncoderTurnedOver	: BOOL 	; // is high when encoder goes thru it's turnover point 
	fAccuracy 			: LREAL ; // Accuracy of trigger 
END_VAR
VAR
	// function commands
	fTriggerPosition 		: LREAL ; // trigger position 
	fTriggerPosCompensated	: LREAL ; // TRigger Position after compensation
	nRotBeforeTrigger		: DINT 	:= 0 ; 	// Full axis rotations before position trigger is armed
	nRotBeforeTriggerCompensated	: DINT := 0 ; // full E_ComponentTypes.Axis rotation before trigger IsFinite armed 
	// Trigger variables 
	fReactionTime			: LREAL	:= 0 ; 	// [ms] Time before reaction to trigger (time compensation)
	// internal values	
	nTriggerRotation		: DINT	:= 0 ; 	// Number of rotations done since trigger is armed 
	fOldAxisPos				: LREAL ; 		// Old axis position for comparison
	nOldAxisRev				: DINT 	; 		// Old modulo revolutions 
	fCompensationDistance	: LREAL := 0 ; 	// [units] trigger compensation distance  
	// Edge functions 
	fbReTriggerArmed		: R_TRIG ; // rising edge trigger on trigger armed (used to rest trigger values) 
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Rising edge function execute
fbReTriggerArmed(CLK := bTriggerArmed); 

// ==== Skip function if trigger is not armed =====
	IF NOT bTriggerArmed THEN  
		bInternalTrigger	:= FALSE 	;
		fOldAxisPos 		:= fAxisPos ;
		nOldAxisRev			:= nAxisModuloRev ;
		nTriggerRotation	:= 0 		; 
	END_IF
	
// ==== check if encoder is at turnover =====
	ExecTurnoverCheck(); 
// ==== compare positions to trigger ======
	CalcTriggerCompensation();
	ExecArmTrigger(); 
]]></ST>
    </Implementation>
    <Folder Name="Commands" Id="{1b521a88-8867-4c30-a8f3-ffc419d26f85}" />
    <Folder Name="Private" Id="{bd42943b-4545-4953-8e0b-5dc87f02bb8d}" />
    <Method Name="CalcTriggerCompensation" Id="{c14346b9-8c2b-4214-9337-f365c25ed524}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE CalcTriggerCompensation : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// ===== Calculate the distance travelled within the delay time =====
	fCompensationDistance	:= fReactionTime  * (fAxisVelocity / 1000);  
	
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CmdArmTrigger" Id="{bb0874c5-3ee2-431d-ba3f-2e9148c0d095}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD PUBLIC CmdArmTrigger : BOOL // arm trigger
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Arm trigger command 
bTriggerArmed S= TRUE ;
Q := FALSE ;

// set feedback
CmdArmTrigger := NOT Q
 ;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CmdSetTriggerPos" Id="{cb333874-4acb-405a-a5fd-6ea784df9431}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD PUBLIC CmdSetTriggerPos : BOOL
VAR_INPUT
	fCmdPosition 	: LREAL ; // Trigger position 
	nCmdRotations	: DINT 	; // Rotations before trigger is set  
	nCmdReactionTime: LREAL ; // [ms]reaction time to trigger signal 
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// set trigger position
fTriggerPosition 	:= fCmdPosition ;
nRotBeforeTrigger	:= nCmdRotations;
fReactionTime 		:= nCmdReactionTime ;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecArmTrigger" Id="{14cdc84b-dd46-46b1-af22-6c4d5c899f39}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD INTERNAL ExecArmTrigger : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// ===== Retract compensationdistance from trigger distance =====

// check if trigger pos is not negative 
	IF NOT bEnablenNegative AND fTriggerPosCompensated < 0 THEN
		fTriggerPosCompensated 			:= fEncoderTurnover + fTriggerPosition ;
		nRotBeforeTriggerCompensated	:= nRotBeforeTrigger -	1;  
	ELSE
		fTriggerPosCompensated 			:= fTriggerPosition - fCompensationDistance ;
		nRotBeforeTriggerCompensated	:= nRotBeforeTrigger ;  
	END_IF 

// ==== compare positions to trigger ======
	IF NOT bTriggerArmed THEN 
		bInternalTrigger := FALSE ;
	ELSIF bEncoderTurnedOver THEN
		IF bDirPositive THEN
			bInternalTrigger S= Between(fOldAxisPos , fTriggerPosCompensated, fEncoderTurnover) ;
			bInternalTrigger S= Between(0			, fTriggerPosCompensated, fAxisPos) ;
		ELSE 
			bInternalTrigger S= Between(0			, fTriggerPosCompensated, fOldAxisPos) ;
			bInternalTrigger S= Between(fAxisPos	, fTriggerPosCompensated, fEncoderTurnover) ;
		END_IF 
		bEncoderTurnedOver := FALSE ;
	ELSE 
		bInternalTrigger S= Between(fAxisPos	, fTriggerPosCompensated, fOldAxisPos) ;
		bInternalTrigger S= Between(fOldAxisPos	, fTriggerPosCompensated, fAxisPos) ;
		fAccuracy	:= ABS( fOldAxisPos - fAxisPos);
	END_IF

	fOldAxisPos := fAxisPos ;

// ==== Check multiturn command =======
	IF bInternalTrigger THEN 
		IF nTriggerRotation >= nRotBeforeTriggerCompensated THEN 
			Q := bInternalTrigger OR fAxisPos > fTriggerPosCompensated;
			bTriggerArmed := FALSE ;			
		ELSE 
			nTriggerRotation := nTriggerRotation + 1 ;
		END_IF 
		bInternalTrigger := FALSE ;
	ELSE 
		Q:= FALSE ;
	END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecTurnoverCheck" Id="{6aecf1cd-9c99-4ef4-b1fa-e8dc716e5dac}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE ExecTurnoverCheck : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[	bEncoderTurnedOver 	:= nOldAxisRev <> nAxisModuloRev ;
	nOldAxisRev 		:= nAxisModuloRev ;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>
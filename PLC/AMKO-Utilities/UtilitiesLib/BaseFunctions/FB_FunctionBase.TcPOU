<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.10">
  <POU Name="FB_FunctionBase" Id="{ef86906a-1986-411c-841b-bedecc286c14}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'reflection'}
FUNCTION_BLOCK PUBLIC ABSTRACT FB_FunctionBase EXTENDS FB_Base
VAR_INPUT
	bSafetyOk	: BOOL 		:= TRUE 				; // Module can operate safely [default true]
END_VAR
VAR_OUTPUT
	sActiveState	: STRING 		:= 'Idle'	; // active state of device 
	bManual			: BOOL 			:= FALSE 	; // device is in manual mode
	bIsSafe			: BOOL 			:= FALSE	; // Device is locked and safe
	bHeld			: BOOL 			:= FALSE 	; // Function is held
	bBlockedCommand	: BOOL 			:= FALSE 	; // a device command is blocked because of collision detect 
END_VAR
VAR
	bCmdManual 		: BOOL			:= FALSE	; // manual commands enabled control functions (thus disable automatic)
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[SUPER^(refFbFault := refFbFault);

// Communicate active state
IF NOT bSafetyOk THEN 
	sActiveState := 'Safety not ok';
ELSIF bErrorActive THEN 
	sActiveState := TO_STRING(stFault.Discription);
ELSIF NOT bInitOk THEN 
	sActiveState := 'Not initialized';
ELSIF bManual THEN 
	sActiveState := 'Manual operation';
ELSE
	sActiveState := 'Operational';
END_IF 

// check for manual command mode
bManual := bCmdManual ;

// Execute device functions
IF bInitOk THEN  
	ExecMachineSafety();
	ExecDevFunctions();
END_IF

// Set fault if commands are blocked
IF bBlockedCommand AND bHeld THEN 
	stFault.Active 			:= TRUE ;
	stFault.ComponentType 	:= E_ComponentTypes.Assembly ;
	stFault.Discription		:= CONCAT( STR1 := sName, STR2 := ' function is blocked');
	stFault.FaultType		:= E_FaultTypes.MC;
END_IF	

]]></ST>
    </Implementation>
    <Method Name="CmdHold" Id="{b7b43511-9b6a-4b39-b79c-935cd576f467}">
      <Declaration><![CDATA[METHOD PUBLIC CmdHold : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bHeld 	:= TRUE ;
CmdHold := bHeld ;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CmdManual" Id="{a80209b9-b449-43b8-997f-3d83541a6746}">
      <Declaration><![CDATA[METHOD PUBLIC CmdManual : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bCmdManual := true ;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CmdSafeStop" Id="{507980d7-bd9e-492d-a4cc-cc2ab03b31c7}">
      <Declaration><![CDATA[METHOD PUBLIC CmdSafeStop : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// check if device is safe
bIsSafe 	:= NOT bEnable ;
CmdSafeStop := bIsSafe ;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecDevFunctions" Id="{351765c3-accd-4b4a-927f-08fd149221ad}">
      <Declaration><![CDATA[METHOD PROTECTED ExecDevFunctions : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecMachineSafety" Id="{21d44c79-19d0-4d2a-975d-6d59086163c6}">
      <Declaration><![CDATA[METHOD PROTECTED ExecMachineSafety : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>
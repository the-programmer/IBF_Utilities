<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_Base" Id="{addcf94a-59e2-4b15-ab00-a0d8c219c4bc}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'reflection'}
FUNCTION_BLOCK PUBLIC ABSTRACT FB_Base
VAR_INPUT
	bEnable			: BOOL 		:= TRUE 	; // Module enable signal reference Default := TRUE (when using system library := GVL_Main.stModules[nModuleId].bEnabled)
	refFbParHandler	: REFERENCE TO Fb_ParLogging 	:= GVL_Parameters.fbParameterHandler	; // reference to parameter handler
	bCmdPause 		: BOOL 		:= FALSE	; // Command Pause functions		
END_VAR
VAR_IN_OUT
	refFbFault	: FB_FaultHandler	; // reference to fault handler ( when using utilities library := GVL_Main.stModules[nModuleId].fbFaultHandler)
END_VAR
VAR_OUTPUT
	bInitOk			: BOOL 			:= FALSE 	; // function is initialized
	bBusy 			: BOOL 			:= FALSE 	; // device is busy
	bReady			: BOOL 			:= FALSE 	; // device is ready for new command 
	bErrorActive	: BOOL			:= FALSE	; // device Error active 
END_VAR
VAR
	sName			: STRING[50]	:= ''		; // Name of device distilled from the path 
	nLocationId		: UDINT 		:= 0		; // device id number made up of module and device number				
	
	stFault			: UDT_Fault		; // Fault data from device

	// Function path 
	{attribute 'instance-path'} 
    {attribute 'noinit'}
	sPath			: STRING	; // Path name of function (used for manual reference)
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF __ISVALIDREF(refFbFault) THEN 
	// check if fault is active and send to fault handler
	refFbFault.CmdAddFault(stFault);
END_IF
]]></ST>
    </Implementation>
    <Method Name="CmdReset" Id="{00c0ea77-90e0-4eb8-bc16-0dce47823936}">
      <Declaration><![CDATA[METHOD PUBLIC CmdReset : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bErrorActive := FALSE ;

CmdReset := TRUE ;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecIdentifyDevice" Id="{daf07950-0fff-424d-bd6a-e1bd58375fcf}">
      <Declaration><![CDATA[METHOD PROTECTED ExecIdentifyDevice : BOOL
VAR_INPUT
	// Message location data
	nId				: UDINT ; // Identification number of object
	nParentId		: UDINT ; // Id of higher level If aplicable (0 = no parent)
	eComponentType	: E_ComponentTypes ; // Component or function type for message compilation
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Check device ID
IF nLocationId = 0 THEN
	nLocationId := (nParentId * 10000) + nId * 100 ;
END_IF

// set message location information
stFault.ComponentType 	:= eComponentType;
stFault.LocationName	:= F_FBNameFromPath(sPath := sPath);
stFault.LocationNumber	:= nLocationId ; 

// Get device name from function and add device to manual
IF sName = '' THEN 
	sName := F_FBNameFromPath(sPath := sPath);
END_IF

ExecIdentifyDevice := nLocationId <> 0 AND sName <> '';]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>